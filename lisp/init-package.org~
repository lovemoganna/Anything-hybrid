* Emacs init package
** Basic Package Setting
   #+begin_src emacs-lisp :exports all :results output
       ;; Emacs package source
	 (require 'package)

	 ;;; slove contract melpa.gnu.org:443 question
	 ;; https://www.reddit.com/r/emacs/comments/cdei4p/failed_to_download_gnu_archive_bad_request/etw48ux
	 ;; https://stackoverflow.com/questions/29085937/package-refresh-contents-hangs-at-contacting-host-elpa-gnu-org80
	 ;(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
	 ; 			 ("marmalade" . "http://marmalade-repo.org/packages/")
	 ; 			 ("melpa" . "http://melpa.org/packages/")))

	 ;;; China Tuna Package Source
	 (setq package-archives '(("gnu"   . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
				  ("melpa" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")))

	 (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
			     (not (gnutls-available-p))))
		(proto (if no-ssl "http" "https")))
	   (when no-ssl (warn "\
	 Your version of Emacs does not support SSL connections,
	 which is unsafe because it allows man-in-the-middle attacks.
	 There are two things you can do about this warning:
	 1. Install an Emacs version that does support SSL and be safe.
	 2. Remove this warning from your init file so you won't see it again."))
	   (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
	   ;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`
	   ;; and `package-pinned-packages`. Most users will not need or want to do this.
	   ;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
	   )
   #+end_src
*** COMMENT fetch the list of package available
    #+begin_src emacs-lisp :results output
      (unless package-archive-contents
	(package-refresh-contents))
    #+end_src
*** maintain your installed package
    #+begin_src emacs-lisp
      (require 'cl)
      ;; Add packages
      (defvar revolt/package-list
	    '(inf-ruby
	      better-defaults
	      perl6-mode
	      pkg-info
	      epl
	      doom-themes
	      js2-mode
	      mermaid-mode
	      helm
	      helm-projectile
	      helm-ag
	      ob-mermaid
	      f
	      dash
	      youdao-dictionary
	      names
	      chinese-word-at-point
	      pos-tip
	      yasnippet
	      wolfram
	      slime
	      quelpa
	      pdf-tools
	      ox-hugo
	      org-bullets
	      ob-http
	      monokai-theme
	      helm-circe
	      evil
	      company))
      (setq package-selected-packages revolt/package-list)

      (defun revolt/packages-installed-p()
	(loop for pkg in revolt/package-list
	      when (not (package-installed-p pkg))
	      do (return nil)
	      finally (return t)
	      )
	)
      (unless (revolt/packages-installed-p)
					  (message "%s" "searching your lost package.....")
					  (dolist (pkg revolt/package-list)
					    (when (not (package-installed-p pkg))
					      (package-install pkg)
					      )
					    )
					  ))
    #+end_src
*** check my installed package state
    #+begin_src emacs-lisp
      
    #+end_src
*** if my package not install refersh package database and installed lost package
    #+begin_src emacs-lisp
      )
    #+end_src
*** COMMENT list the packages you want & install the missing packages
    #+begin_src emacs-lisp :results output
      ; install the missing packages
      (dolist (revolt/package revolt/package-list)
	(unless (package-installed-p revolt/package)
	  (package-install package)))

      (require 'better-defaults)
    #+end_src
** Use quelpa manage emacs package
   #+begin_src emacs-lisp :exports all :results output
     ;; load another setting path
     (add-to-list 'load-path "~/.emacs.d/lisp")

     ;; use quelpa manage pacakge
     (unless (package-installed-p 'quelpa)
       (with-temp-buffer
	 (url-insert-file-contents "https://github.com/quelpa/quelpa/raw/master/quelpa.el")
	 (eval-buffer)
	 (quelpa-self-upgrade)))

     ;; another pacakge manage tools -- quelpa
     ;; (require 'init-quelpa "./quelpa/init-quelpa")

     (package-initialize) ;; You might already have this line
   #+end_src

** import other package setting
  #+begin_src emacs-lisp :exports all :results output
       ;; org setting
    (require 'init-org "./org/init-org")

    ;; customize
    (require 'ob-tangle)
    (org-babel-load-file "~/.emacs.d/lisp/customize/customize.org")

    ;(setq custom-file "~/.emacs.d/lisp/customize/customize.el")
    ;(if (file-exists-p custom-file)
    ;    (load-file custom-file))

    ;; utils settings
    (require 'init-utils "./utils/init-utils")

    ;; package manage tools
    ;;(require 'init-cask "./cask/init-cask")


    ;; import test module
    (require 'init-test "./test/init-test")

    ;; customize keyboard macro
    (fset 'helloa
       (kmacro-lambda-form [?\( ?m ?e ?s ?s ?a ?g ?e ?  ?\" ?h ?e ?l ?l ?o ?\" ?\)] 0 "%d"))

    ;; my-command-line macro
    (fset 'my-comment-line
	  (kmacro-lambda-form [?Â» ?\C-u ?5 ?0 ?-] 0 "%d"))

    ;; convenient
    (defalias 'rs 'replace-string)
  #+end_src

  
