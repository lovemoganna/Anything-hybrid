#+-*-mode: org;-*-
#+title: Revolt's private configuration in arch linux
#+startup: showall
** Windows Tools 
*** stumpwm config
    #+header: :tangle "~/.stumpwm.d/init.lisp"
    #+begin_src common-lisp 
      ;; -*-Emacs-lisp-*-

      ;; load some packages from the git stumpwm contrib directory.
      ;;(load "~/.config/stumpwm/stumpwm-contrib/modeline/net/net.lisp")
      ;;(load "~/.config/stumpwm/stumpwm-contrib/modeline/cpu/cpu.lisp")

      ;;change cursor from defalut X shape
      (stumpwm:run-shell-command "xsetroot -cursor_name left_ptr")

      ;; default start input methods
      (stumpwm:run-shell-command "fcitx-autostart")

      (stumpwm:run-shell-command "xsetroot -cursor_name left_ptr")

      ;; Change stumpwm prefix key to Super key
      (set-prefix-key (kbd "s-RET"))

      ;; Binging keys
      (stumpwm:define-key stumpwm:*root-map* (stumpwm:kbd "C-z") "echo NICE,WELL DONE")

      ;; if you want to reload stumpwm,could type =s-ERT ;= then input =loadrc=

      ;; Create myself owm keymap.
      (defvar *my-frame-bindings*
	(let ((m (stumpwm:make-sparse-keymap)))
	  (stumpwm:define-key m (stumpwm:kbd "c") "curframe")
	  (Stumpwm:Define-key m (stumpwm:kbd "M-b") "move-focus left")
	  (stumpwm:define-key m (stumpwm:kbd "f") "exec firefox")
	  (stumpwm:define-key m (stumpwm:kbd "r") "loadrc")
	  (stumpwm:define-key m (stumpwm:kbd "l") "reload")
	  m
	  ))

      (stumpwm:define-key stumpwm:*root-map* (stumpwm:kbd "RET") '*my-frame-bindings*)

      ;; 2-modifier
      ;; slove "Super" key not work.
      (stumpwm:run-shell-command "feh --bg-scale ~/.emacs.d/image-dired/bk_image/bizhi.png")

      ;; test Hyper command
      (define-key *top-map* (kbd "H-RET") "fullscreen")
      (define-key *top-map* (kbd "H-Left") "gprev")
      (define-key *top-map* (kbd "H-Right") "gnext")
      (define-key *top-map* (kbd "H-TAB") "other")

      ;; command
      (define-key *root-map* (kbd "[") "exchange-direction left")
      (define-key *root-map* (kbd "]") "exchange-direction right")

      ;; writing Commands
      (defcommand here_we_are(name location)
	((:string "Enter your name:")
	 (:string "Enter your location:")
	 )					;
	(message "~a,now your location is ~a" name location)
	)

      (define-key *root-map* (kbd "L") "here_we_are revolt")

      ;; define emacs
      (defcommand emacs () ()  "run-or-raise emacs"  (run-or-raise "emacsclient -ca emacs" '(:class "Emacs" :title "Emacs")))
      (define-key *root-map* (kbd "e") "emacs")
      ;; (stumpwm:run-shell-command "emacs --daemon")
      (stumpwm:run-shell-command "pulseaudio --start")

      (setf *mode-line-timeout* 1)

      ;; turn on/off the mode line for the current head only
      (stumpwm:toggle-mode-line (stumpwm:current-screen)
				(stumpwm:current-head))

      ;; disable startup message.
      (setf *startup-message* nil)

      ;; default border style
      (setq *window-border-style* :thin)

      ;; test stumpwm modules
      (setf *module-dir* "~/.stumpwm.d/modules/")
      (init-load-path *module-dir*)

      (load-module "cpu")
      (load-module "net")
      (load-module "surfraw")
      (load-module "command-history")
      ;; setting default font
      (ql:quickload "clx-truetype")
      (xft:cache-fonts)
      (load-module "ttf-fonts")
      (set-font (make-instance 'xft:font :family "DejaVu Sans Mono" :subfamily "Book" :size 10))
      ;;(load-module "screenshot")
      ;; Set font for messages and modeline

      ;;(set-font (make-instance 'xft:font :family "DejaVu Sans Mono" :subfamily "Book" :size 12))""""'))
      ;; display the windows list and the current date on the modeline.
      (setf stumpwm:*screen-mode-line-format*
	    (list "%v | CG: %n%u | %C | %l"

		  "^>"
		  " ^7*"
		  '(:eval (stumpwm:run-shell-command "date" t))
		  ))

      (setf stumpwm:*mode-line-background-color* "#FBD7CF")

      (enable-mode-line (current-screen) (current-head) t)
      ;;(define-key *root-map* (kbd "C-f f") "exec firefox")
      ;; change Window focus on mouse click
      ;;(setf *mouse-focus-policy* :click)

      (setf *window-format* "%m%n%s%c")
      (setf *group-format* "%n%s%t")

      ;; setting time format
      ;;(setf *time-modeline-string* "%a %b %e %k:%M")

      ;; test
    #+end_src
** System setting
*** read xinitrc setting
    #+header: :results verbatim
    #+begin_src shell
      cat ~/.xinitrc 
    #+end_src

    #+RESULTS:
    : !custom xinitrc
    : xrdb -merge -I$HOME/.Xresources
    : setxkbmap -layout us -option ctrl:nocaps
    : 
    : # The default path is /usr/local/bin/stumpwm
    : echo /usr/local/bin/stumpwm >> ~/.xinitrc
    : startx

*** x serve kinds of setting
    :PROPERTIES:
    :header-args: :results verbatim :exports none
    :END:
    
**** xinit
     #+header: :tangle "~/.xinitrc"
     #+begin_src shell

     #+end_src

**** xorg
     
***** Driver installation
      
      linux kernel include open source video drivers and support for
      hardware accelerated framebuffers.Howerver,userland support is
      required for OpenGL and 2D acceleration in X11.
      
      - identify card
	
	#+begin_src shell
	  lspci | grep -e VGA -e 3D
	#+end_src

	#+RESULTS:
	: 00:02.0 VGA compatible controller: Intel Corporation Device 3e90
	: 01:00.0 VGA compatible controller: NVIDIA Corporation GP107M [GeForce GTX 1050 Mobile] (rev a1)

      - search the appropriate driver.
	#+begin_src shell
	  pacman -Ss xf86-video
	#+end_src

	#+RESULTS:
	#+begin_example
	extra/xf86-video-nouveau 1.0.16-1 (xorg-drivers)
	    Open Source 3D acceleration driver for nVidia cards
	#+end_example

      - Note
	
	1.For NVIDIA Optimus enabled laptop which uses an integrated
        video combined with a dedicated GPU.So more care about
        the [[*NVIDIA Optimus][NVIDIA Optimus]].

*** NVIDIA Optimus
    
    NVIDIA Optimus is a technology that allows an intel integrated GPU
    and discrete NVIDIA GPU to be built into and accessed by a laptop.

**** Use Intel graphics only   
     if you only care to use a certain GPU without switching,check the
     options in your system's BIOS.There should be an option to
     disable one of the cards.

     If your BIOS does not allow to disable Nvidia graphics,you can
     disable it from the linux kernel itself.See [[*Fully Power Down Discrete GPU][Fully Power Down
     Discrete GPU]].

**** Use NVIDIA graphics only
     The proprietary NVIDIA drive can be configured to be the primary
     rendering provider.It also has notable screen-tearing(屏幕撕裂) issues
     unless you enable prime sync by enabling [[*DRM Kernel mode setting][DRM Kernel mode setting]].
 
     - Install the NVIDIA driver and =xorg-xrandr=.
     - configure =/etc/X11/xorg.conf.d/10-nvidia-drm-outputclass.conf=
       the options of which will be combined with the package provided
       =/usr/share/X11/xorg.conf.d/10-nvidia-drm-outputclass.conf= to
       provide compatibility with this setup.

     #+header: :dir /usr/share/X11/xorg.conf.d/
     #+begin_src shell :results verbatim
       cat 10-nvidia-drm-outputclass.conf
     #+end_src

     #+RESULTS:
     : Section "OutputClass"
     :     Identifier "nvidia"
     :     MatchDriver "nvidia-drm"
     :     Driver "nvidia"
     :     Option "AllowEmptyInitialConfiguration"
     :     ModulePath "/usr/lib/nvidia/xorg"
     :     ModulePath "/usr/lib/xorg/modules"
     : EndSection
     
     #+header: :tangle "/etc/X11/xorg.conf.d/10-nvidia-drm-outputclass.conf"
     #+begin_src text
       Section "OutputClass"
       Identifier "intel"
       MatchDriver "3e90"
       Driver "modesetting"
       EndSection

       Section "OutputClass"
       Identifier "nvidia"
       MatchDriver "nvidia-drm"
       Driver "nvidia"
       Option "AllowEmptyInitialConfiguration"
       Option "PrimaryGPU" "yes"
       ModulePath "/usr/lib/nvidia/xorg"
       ModulePath "/usr/lib/xorg/modules"
       EndSection
     #+end_src

     Next,add the following two lines to the beginning of =~/.xinitrc=
     #+header: :results verbatim
     #+begin_src shell :dir "~"
       cat .xinitrc
     #+end_src

     #+RESULTS:
     : 
     : 
     : xrandr --setprovideroutputsource modesetting NVIDIA-0
     : xrandr --auto
     : xrandr --dpi 96

     #+header: :tangle "~/.xinitrc"
     #+begin_src shell
       xrandr --setprovideroutputsource modesetting NVIDIA-0
       xrandr --auto
       xrandr --dpi 100
     #+end_src

     now put the above content into =/usr/share/sddm/scripts/Xsetup=
     if you use =SDDM= as your start desktop display manager.
     
*** SDDM
    
**** Configuration
     The default configuration file for SDDM can be found at
     =/usr/lib/sddm/sddm.conf.d/default.conf=.
     
     For any changes,create configuration files in =/etc/sddm.conf.d/=
     
     #+header: :dir "/usr/lib/sddm/sddm.conf.d/" :results verbatim
     #+begin_src shell
       cat default.conf
     #+end_src

     #+RESULTS:
     #+begin_example
     [Autologin]
     # Whether sddm should automatically log back into sessions when they exit
     Relogin=false

     # Name of session file for autologin session (if empty try last logged in)
     Session=

     # Username for autologin session
     User=


     [General]
     # Halt command
     HaltCommand=/usr/bin/systemctl poweroff

     # Input method module
     InputMethod=

     # Comma-separated list of Linux namespaces for user session to enter
     Namespaces=

     # Initial NumLock state. Can be on, off or none.
     # If property is set to none, numlock won't be changed
     # NOTE: Currently ignored if autologin is enabled.
     Numlock=none

     # Reboot command
     RebootCommand=/usr/bin/systemctl reboot


     [Theme]
     # Current theme name
     Current=

     # Cursor theme used in the greeter
     CursorTheme=

     # Number of users to use as threshold
     # above which avatars are disabled
     # unless explicitly enabled with EnableAvatars
     DisableAvatarsThreshold=7

     # Enable display of custom user avatars
     EnableAvatars=true

     # Global directory for user avatars
     # The files should be named <username>.face.icon
     FacesDir=/usr/share/sddm/faces

     # Theme directory path
     ThemeDir=/usr/share/sddm/themes


     [Users]
     # Default $PATH for logged in users
     DefaultPath=/usr/local/sbin:/usr/local/bin:/usr/bin

     # Comma-separated list of shells.
     # Users with these shells as their default won't be listed
     HideShells=

     # Comma-separated list of users that should not be listed
     HideUsers=

     # Maximum user id for displayed users
     MaximumUid=60000

     # Minimum user id for displayed users
     MinimumUid=1000

     # Remember the session of the last successfully logged in user
     RememberLastSession=true

     # Remember the last successfully logged in user
     RememberLastUser=true

     # When logging in as the same user twice, restore the original session, rather than create a new one
     ReuseSession=false


     [Wayland]
     # Enable Qt's automatic high-DPI scaling
     EnableHiDPI=false

     # Path to a script to execute when starting the desktop session
     SessionCommand=/usr/share/sddm/scripts/wayland-session

     # Directory containing available Wayland sessions
     SessionDir=/usr/share/wayland-sessions

     # Path to the user session log file
     SessionLogFile=.local/share/sddm/wayland-session.log


     [X11]
     # Path to a script to execute when starting the display server
     DisplayCommand=/usr/share/sddm/scripts/Xsetup

     # Path to a script to execute when stopping the display server
     DisplayStopCommand=/usr/share/sddm/scripts/Xstop

     # Enable Qt's automatic high-DPI scaling
     EnableHiDPI=false

     # The lowest virtual terminal number that will be used.
     MinimumVT=1

     # Arguments passed to the X server invocation
     ServerArguments=-nolisten tcp

     # Path to X server binary
     ServerPath=/usr/bin/X

     # Path to a script to execute when starting the desktop session
     SessionCommand=/usr/share/sddm/scripts/Xsession

     # Directory containing available X sessions
     SessionDir=/usr/share/xsessions

     # Path to the user session log file
     SessionLogFile=.local/share/sddm/xorg-session.log

     # Path to the Xauthority file
     UserAuthFile=.Xauthority

     # Path to xauth binary
     XauthPath=/usr/bin/xauth

     # Path to Xephyr binary
     XephyrPath=/usr/bin/Xephyr
     #+end_example
     
    
**** Autologin
     
     check avaliable session types.
     #+header: :dir "/usr/share/xsessions/" :results verbatim
     #+begin_src shell
       ls
     #+end_src

     #+RESULTS:
     : openbox.desktop
     : openbox-kde.desktop
     : plasma.desktop
     : stumpwm.desktop
     : xfce.desktop

     setting automatic login through configuration file:
     
     #+header: :tangle /etc/sddm.conf.d/autologin.conf
     #+begin_src shell
       [Autologin]
       User = revolt
       Session = stumpwm.desktop
     #+end_src

     
     
     
*** NVIDIA
    
**** DRM Kernel mode setting

*** Hybrid graphics
    
**** Fully Power Down Discrete GPU

** Xmodmap
   I need Super key and Hyper key.

   
*** How to know what is super key?
  
    #+header: :results verbatim
    #+begin_src shell
      xmodmap -pm
    #+end_src

    #+RESULTS:
    #+begin_example
    xmodmap:  up to 3 keys per modifier, (keycodes in parentheses):

    shift       Shift_L (0x32),  Shift_R (0x3e)
    lock        Caps_Lock (0x42)
    control     Control_L (0x25),  Control_R (0x69)
    mod1        Alt_L (0x40),  Super_R (0x6c),  Meta_L (0xcd)
    mod2        Num_Lock (0x4d)
    mod3      
    mod4        Super_L (0x85),  Super_L (0xce)
    mod5        ISO_Level3_Shift (0x5c),  Mode_switch (0xcb)

    #+end_example

    now,run shell command =xev=,click =Super_L= key,show the content
    of the following is:
    
    #+begin_example
      KeyRelease event, serial 37, synthetic NO, window 0x4000001,
      root 0x75, subw 0x0, time 2014984514, (70,-18), root:(82,60),
      state 0   x50, keycode 115 (keysym 0xffeb, Super_L), same_screen YES,
      XLookupString gives 0 bytes: 
      XFilterEvent returns: False
    #+end_example
    
    you will see,Keycode is 115. but my Super_L keycode is 133,Super_R
    keycode is 108.
*** check Hyper key's KeyCodes
    
    #+begin_src shell :results verbatim
      xmodmap -pke | egrep '(Hyper|Super)'
    #+end_src

    #+RESULTS:
    : keycode 108 = Super_R NoSymbol Super_R
    : keycode 133 = Super_L NoSymbol Super_L
    : keycode 134 = Super_R NoSymbol Super_R
    : keycode 206 = NoSymbol Super_L NoSymbol Super_L
    : keycode 207 = NoSymbol Hyper_L NoSymbol Hyper_L
*** maintain xmodmap setting

    cause we no SuperL and Super_R,so we could run the following
    xmodmap commands add:
    
    #+header: :tangle "~/.Xmodmap"
    #+begin_src shell 
      clear mod4
      add mod4 = Super_L
      remove Lock = Caps_Lock
      remove Control = Control_L
      remove mod1 = Alt_R

      keysym Control_L = Caps_Lock
      keysym Caps_Lock = Control_L
      keysym Alt_R = Caps_Lock

      keycode 108 = Caps_Lock
      keycode 37 = Hyper_L

      add Lock = Caps_Lock
      add Control = Control_L
      clear mod5
      add mod5 = Hyper_L
    #+end_src
** Emacs Daemon
   #+header: :tangle "~/.config/systemd/user/emacs.service"
   #+begin_src emacs-lisp 
     [Unit]
     Description=Emacs text editor
     Documentation=info:emacs man:emacs(1) https://gnu.org/software/emacs/
     [Service]
     Type=forking
     ExecStart=/usr/bin/emacs --daemon
     ExecStop=/usr/bin/emacsclient --eval "(kill-emacs)"
     Environment=SSH_AUTH_SOCK=%t/keyring/ssh
     Restart=on-failure

     [Install]
     WantedBy=default.target
   #+end_src
