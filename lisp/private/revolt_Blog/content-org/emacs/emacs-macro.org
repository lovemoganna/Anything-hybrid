#+title: Emacs Macros
#+hugo_base_dir: ../../
#+hugo_section: ./post
#+Date: <2020-02-23 Sat>
#+hugo_auto_set_lastmod: t
#+hugo_weight: auto
#+hugo_tags: emacs macro
#+hugo_categories: emacs elisp

Macro允许你定义新的控制结构和其他的语言功能。

Macro的定义很像函数。我们调用的这个Macro扩展的表达式,解释了如何去计算其
他的Lisp表达式，从而进一步计算值。而不是解释如何去计算一个值。

<!--more-->

Macro之所以可以这样做，因为他们对参数的上的未评估的表达式进行运算。而
不是像函数那样对参数值进行运算。因此它们可以构建一个包含这些参数表达式
或者它一部分的扩展。

如果你使用一个 Macro 做一个普通函数可以做的一些事情,只是为了速度，可以
考虑使用一下 [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Inline-Functions.html#Inline-Functions][Inline function]]。

- [[*Simple Macro][Simple Macro]]: A basic example。
- [[*Expansion of a Macro Call][Expansion of a Macro Call]]: How,When and why macros are expanded.
- [[*Compiling Macros][Compiling Macros]]: How macros are expanded by the compiler.
- [[*Defining Macros][Defining Macros]]:  How to write a macro definition.
- [[*Common Problems Using Macros][Common Problems Using Macros]]: Don't evaluate the macro arguments too
  many times.Don't hide the user's variables.


** Simple Macro
   
   假设我们想要定义Lisp结构来增加一个变量值。类似于C语言中的 =++=
   .我们想写为 =(inc x)= ，并对 =(setq x (1+ x))= 有效。
   
   下面这个宏可以完成这个工作。
   
   #+begin_src emacs-lisp
     (defmacro inc (var)
       (list 'setq var (list '1+ var)))
   #+end_src

   #+RESULTS:
   : inc
   
   解释如下：
   
   1.调用宏 ~(inc x)~,参数 /var/ 是 *symbol x*,不是x的值，因为参数 /var/
   将会在一个函数里面。
   
   2.这个宏的主体使用上面的方式来构建这个扩展，也就是 ~(setq x (1+
   x))~.一旦宏定义返回这个扩展，Lisp继续评估它，因此增加 /x/ 的值。

   现在我想用下面的方式调用，可惜不管用。
   
   ~(inc x)					;error call macro methods~
   
** Expansion of a Macro Call
   
   宏调用就像函数调用一样，因此它是以宏的名字开头的list.这个
   list的其余元素是宏的参数。
   
   宏调用的评估开始像函数调用的评估，除了一个关键不同之外：
   *宏的参数* 是出现在宏调用中的 *真实的表达式*.它们在给到宏定义之前不
   会被评估。相比较之下， *函数的参数* 是评估调用list函数的元素的结果。
   
   在获得参数的过程中，Lisp执行宏定义就像执行函数一样。 =宏的参数变量=   
   被绑定到来自 ~宏调用~ 的参数值，或者是被绑定在有 ~&rest~ 参数下的的
   list。宏的主体就像函数的主体一样执行和返回它的值.
   
   宏和函数之间的第二个关键不同在于：宏的值通过替代Lisp表达式的宏主体
   返回，也被成为宏扩展。Lisp解释器从宏返回后立即继续评估宏扩展。
   
   宏扩展在正常情况下被评估之后，它可能会包含调用其它宏。甚至可能调用
   同样的宏，尽管这是异常的情况。
   
   注意Emacs在载入未编译的Lisp文件当中，会尝试的展开宏。这可能不会经常
   出现，但是如果出现了，这将会加快后续执行的速度。具体参见：[[https://www.gnu.org/software/emacs/manual/html_node/elisp/How-Programs-Do-Loading.html#How-Programs-Do-Loading][How
   Programms Do Loading]]. 

   你可以看到给出的宏调用的扩展是通过 ~macroexpand~ 来调用的。
   
   - Function: *macroexpand* form &optional environment
     1. 这个函数扩展 =form=,如果它是一个 =macro call= 的话。
     2. 如果结果是其他的 =macro call= 的话，它将依次扩展,直到不是 =macro call= 的结果。
     3. 这个值通过 ~macroexpand~ 来返回。
     4. 如果这个 =form= 不是一个 =macro call= 来开头的话，它将会按照给
        定的内容返回。

     注意 =macroexpand= 不能视为 =form= 的子表达式（尽管有一些宏定义确
     实是这么回事）。就算是这个 =form= 是调用宏本身, =macroexpand= 也
     不会扩展它们。
     
     函数 =macroexpand= 不会展开调用 =inline functions=. 通常情况下这
     是不需要的，因为调用 =inline function= 比对调用普通函数更容易理解。
     
     如果 提供了 /environment/ ,它会指定一个宏定义的一个 /alist/ ，来遮
     住当前定义的宏。字节编译使用这个功能。
     
     #+begin_src emacs-lisp -n 1 :exports ss  :output file :results file :file "macro-and-expand-macro.el" :output-dir ./
       (defmacro inc (var)
	 (list 'setq var (list '1+ var)))

       (macroexpand '(inc r))                  
     #+end_src

     #+RESULTS:
     [[file:./macro-and-expand-macro.el]]
    
     The Result in here: [[file:macro-and-expand-macro.el][Results]]
     
     #+name: Multi_variable_define_macro
     #+begin_src emacs-lisp :results code :exports result
       (defmacro inc2 (var1 var2)
	 (list 'progn (list 'inc var1) (list 'inc var2)))

       (macroexpand '(inc2 r s))
     #+end_src

     #+RESULTS: Multi_variable_define_macro
     #+begin_src emacs-lisp
       (progn
	 (inc r)
	 (inc s))
     #+end_src

   - Function: *macroexpand-all* form &optional environment
     
     macroexpand-all expands macros like macroexpand, but will look
     for and expand all macros in form, not just at the top-level. If
     no macros are expanded, the return value is eq to form. 
     
     #+name: Multi_variable_define_macro_expand_all
     #+begin_src emacs-lisp :results code :exports result
       (defmacro inc (var)
	 (list 'setq var (list '1+ var)))

       (defmacro inc2 (var1 var2)
	 (list 'progn (list 'inc var1) (list 'inc var2)))

       (macroexpand-1'(inc2 r s))		;`macroexpand-1` just performs one step of the exapansion.
       (macroexpand-all'(inc2 r s))
     #+end_src

     #+RESULTS: Multi_variable_define_macro_expand_all
     #+begin_src emacs-lisp
     (progn
       (setq r
	     (1+ r))
       (setq s
	     (1+ s)))
     #+end_src

   - Function: *macroexpand-1*,just performs one step of the
     exapansion.

** Compiling Macros
   :PROPERTIES:
   :EXPORT_HUGO_TITLE: Macros and Byte Compilation
   :END:
   
   Why we take the trouble to compute an expansion for a macro and
   then evaluate the expansion?
    
   Why not have the macro body produce the desired results directly?
   The reason has to do with compilation. 
   
   When a macro call appears in a Lisp program being compiled, the Lisp
   compiler calls the macro definition just as the interpreter would, and
   receives an expansion.But instead of evaluating this expansion, it
   compiles the expansion as if it had appeared directly in the
   program. As a result, the compiled code produces the value and side
   effects intended for the macro, but executes at full compiled
   speed. This would not work if the macro body computed the value and
   side effects itself—they would be computed at compile time, which
   is not useful. 
   
   In order for compilation of macro calls to work, the macros must
   already be defined in Lisp when the calls to them are compiled. if
   a file being compiled contains a defmacro form, the macro is
   defined temporarily for the rest of the compilation of that file. 
   

   Byte-compiling a file also executes any require calls at top-level in
   the file, so you can ensure that necessary macro definitions are
   available during compilation by requiring the files that define
   them.To avoid loading the macro definition files when someone runs the
   compiled program, write eval-when-compile around the require calls.

   so,should know the means of emacs lisp [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Loading.html#Loading][load]].
   
** Defining Macros
   A Lisp macro object is a list whose car is macro, and whose cdr is
   a function. Expansion of the macro works by applying the function
   (with apply) to the list of unevaluated arguments from the macro
   call.
   
   It is possible to use an anonymous Lisp macro just like an
   anonymous function, but this is never done, because it does not
   make sense to pass an anonymous macro to functionals such as
   mapcar.
   
   — *Macro*: defmacro name args [doc] [declare] body...
   
   defmacro defines the symbol name (which should not be quoted) as a
   macro that looks like this: 
   
   #+begin_example -i 10
     (macro lambda args . body)
   #+end_example
   
   Note that the cdr of this list is a lambda expression.
   
   - This macro object is stored in the function cell of name. 
   - The meaning of args is the same as in a function, and the
     keywords &rest and &optional may be used (see Argument List). 
   - Neither name nor args should be quoted. 
   - The return value of defmacro is undefined.
   
     
   for doc & declare, should be a something form specifying for
   macro.[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Declare-Form.html#Declare-Form][The declare Form]].
   
   Note that macros cannot have interactive declarations, since they
   cannot be called interactively. 
   
   Macros often need to construct large list structures from a mixture
   of constants and nonconstant parts.To make this easier, use the ~`~
   syntax (see Backquote). For example: 
   
   #+name: t_become_nil
   #+begin_src emacs-lisp :exports file :results file :file "t_become_nil.el" :output-dir ./
     (setq foo nil)
     (defmacro t-becomes-nil (variable)
       `(if (eq ,variable t)
	    (setq ,variable nil)
	    (setq ,variable t)
	  ))
     (macroexpand '(t-becomes-nil foo))
   #+end_src

   #+RESULTS: t_become_nil
   [[file:./t_become_nil.el]]

   到现在，咱们就会定义一个宏了。现在我想利用宏创建一个函数来执行。前
   面的这些玩意都是创建的各种部件。没啥意思。
   

   

   
   
** Common Problems Using Macros
   
   Macro expansion can have counterintuitive consequences. This
   section describes some important consequences that can lead to
   trouble, and rules to follow to avoid trouble.
   
   - [[*Wrong Time][Wrong Time]]:  Do the work in the expansion, not in the macro.
   - [[*Argument Evaluation][Argument Evaluation]]: The expansion should evaluate each macro arg once.
   - 
   
*** Wrong Time
    编写宏时，最常见的问题就是过早的完成了一些工作，在扩展宏的同时，不
    是扩展它本身。例如，一个真实的包有下面的定义：
    
    #+begin_src emacs-lisp :exports result 
      (defmacro my-set-buffer-multibyte (arg)
	(if (fboundp 'set-buffer-multibyte)
	    (set-buffer-multibyte arg)))
    #+end_src

    #+RESULTS:
    : my-set-buffer-multibyte

    在这个错误的宏定义里面，虽然这个程序可以正常工作，当时却会在编译的
    时候失败。这个宏定义 调用 =set-buffer-multibyte= 在编译的时候，是
    错的，当这个编译包运行的时候，就会什么也不会做。这个程序真正想做的
    是下面这个：
    
    #+name: my-set-buffer-multibytes
    #+begin_src emacs-lisp :results code :exports result
      (defmacro my-set-buffer-multibytes (arg)
	(if (fboundp 'set-buffer-multibyte)
	    `(set-buffer-multibyte ,arg)))

      (macroexpand '(my-set-buffer-multibytes t))
    #+end_src

    #+RESULTS: my-set-buffer-multibytes
    #+begin_src emacs-lisp
    (set-buffer-multibyte t)
    #+end_src
    
    This macro expands, if appropriate, into a call to
    set-buffer-multibyte that will be executed when the compiled
    program is actually run.

    #+begin_src emacs-lisp
      (fboundp 'list)				;t
      (fboundp 'car)				;t
    #+end_src
    
    
*** Argument Evaluation
    *Evaluating Macro Arguments Repeatedly*
    
    When defining a macro you *must* pay attention to the number of
    times the arguments will be evaluated when the expansion is
    executed. 
    
    The following macro (used to facilitate iteration) illustrates the
    problem. This macro allows us to write a for-loop construct.
    
    
    *org mode* 的 ~results~ 关键字一定要设置好选项，不然不起作用的。贼j2难受。
    
    - /output/ 是程序执行过程中的值。
    - /code/ 是程序执行的最终值。
    
    #+name: build_while_loop
    #+begin_src emacs-lisp :results output :exports result
      (defun build_while_loop (init final)
	    (let ((i init))
	      (while (< i final)
		(progn
		  (print ( format "%s" i))
		  (setq i (1+ i))
		  (print (format "%s" "我在循环体内"))))))

      (format "%S" (build_while_loop 1 11))
    #+end_src

    #+RESULTS: build_while_loop
    #+begin_example

    "1"

    "我在循环体内"

    "2"

    "我在循环体内"

    "3"

    "我在循环体内"

    "4"

    "我在循环体内"

    "5"

    "我在循环体内"

    "6"

    "我在循环体内"

    "7"

    "我在循环体内"

    "8"

    "我在循环体内"

    "9"

    "我在循环体内"

    "10"

    "我在循环体内"
    #+end_example

    现在我们想将上面这个函数改造成宏的写法。来测试一下，看管用不管用。
    
    #+begin_src emacs-lisp
    #+end_src
    
*** TODO Demo
    #+begin_src emacs-lisp
      (defmacro inc (var)
	(list 'setq var (list '1+ var)))
      inc

      (macroexpand '(inc x))
      (setq x (1+ x))

      (for i from 1 to 10 do (print i))

      (let ((i 1))
	(while (< i 11)
	  (progn
	    (print ( format "%s" i))
	    (setq i (1+ i))
	    (print (format "%s" "我在循环体内")))))

      ;; TODO
      (cons 'while
	    (cons (list '<= var final))
	    )

      ;; TODO
      (append )


      ;; TODO defmacro
      (defmacro build_while (var init final do &rest body)
	(list 'let (list (list var init))
	      (cons 'while
		    (cons (list '<= var final))
	      
		    ))
	)


      ;; Demo
      (defmacro for (var form init to final do &rest body)
	"Execute a simple \"for\" loop.
      For Example, (for i from 1 to 10 do (print i))
      "
	(list 'let (list (list var init))
	      (cons 'while
		    (cons (list '<= var final)
			  (append body (list (list 'inc var)))
			  )
		    )
	      )
	)

      ;; Demo function
      (let ((i 1))
	     (while (<= i 3)
	       (setq square (* i i))
	       (princ (format "\n%d %d" i square))
	       (inc i)))


      ;; Demo Macro call 
      (for i from 1 to 3 do
	   (setq square (* i i ))
	   (princ (format "\n%d %d" i square)))

      1 1
      2 4
      3 9nil

      1 1
      2 4
      3 9nil

	(defmacro for (var from init to final do &rest body)
	     "Execute a simple \"for\" loop.
	   For example, (for i from 1 to 10 do (print i))."
	     `(let ((,var ,init))
		(while (<= ,var ,final)
		  ,@body
		  (inc ,var))))
      for

       (defun build_while_loop (init final)
		  (let ((i init))
		    (while (< i final)
		      (progn
			(print ( format "%s" i))
			(setq i (1+ i))
			(print (format "%s" "我在循环体内"))))))
	    

	    
		   

      (format "%S" (build_while_loop 1 11))

      "1"

      "我在循环体内"

      "2"

      "我在循环体内"

      "3"

      "我在循环体内"

      "4"

      "我在循环体内"

      "5"

      "我在循环体内"

      "6"

      "我在循环体内"

      "7"

      "我在循环体内"

      "8"

      "我在循环体内"

      "9"

      "我在循环体内"

      "10"

      "我在循环体内"
      "nil"
    #+end_src
*** Suprising Local Vars

*** Repeated Expansion
   

** TODO I LOST SOMETHING
   - Elisp: &rest
   - Elisp: &optional

   

