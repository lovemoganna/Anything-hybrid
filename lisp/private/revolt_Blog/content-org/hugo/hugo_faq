+-*-mode: org;-*-
#+creator: Emacs 28.0.50 (Org mode 9.3 + ox-hugo)
#+hugo_with_locale: en
#+hugo_front_matter_format: toml
#+hugo_level_offset: 1
#+hugo_delete_trailing_ws:
#+hugo_base_dir: ../../
#+hugo_section: post
#+date: <2020-03-20 Fri>
#+hugo_tags: hugo
#+hugo_categories: hugo

* hugo faq
  :PROPERTIES:
  :EXPORT_FILE_NAME: hugo
  :END:
  
  #+begin_src toml :front_matter_extra t
  autoCollapseToc = true
  #+end_src

  hugo blog feature explore.

  <!--more-->
** Create Your Own Shortcodes
   You can extend hugo's built-in shortcodes by creating your own
   using the same templating syntax as that for single and list pages.
   
   you can think of shortcodes as the intermediary between [[*page and list templates][page and
   list templates]] and [[*basic content files][basic content files]].

** Create Custom Shortcodes

   Hugo provides the ability to easily create custom shortcodes to
   meet your website's needs.
   
   Add a shortcodes template to your site,in
   =~/layouts/shortcodes/rawhtml.html=,and write the fllowing content[fn:1]:

   #+begin_example
     <!-- raw html>
     {{.Inner}}
   #+end_example
   
   now you could follow the below improt methods call custom
   shortcodes:

   {{< rawhtml >}}
   <p class="speshal-fancy-custom">
   This is <strong>raw HTML</strong>, inside Markdown.
   </p>
   {{< /rawhtml >}}


   {{ hightlight html}}
   {{< rawhtml >}}
   <p class="speshal-fancy-custom">
   This is <strong>raw HTML</strong>, inside Markdown.
   </p>
   {{< /rawhtml >}}
   {{ /hightlight }}
   
** Shortcodes File Location
   To create a shortcode,place an HTML template in the
   ~layouts/shortcodes~ directory of your =Directory Structure=.

** Directory Structure

   - archetypes

     自定义Page template,just run =hugo new post/test.md=.jsut run
     =hugo run test/test.md=,just make the =/content/test/test.md=,but
     not show in hugo blog.Currrent i can't slove the problem.may be
     should see [[*Hugo Modules][Hugo Modules]].
     
** Hugo Modules

   Hugo Modules are the core building blocks in Hugo.A module can be
   your main project or a smaller module or more of the 7 component
   types defined in Hugo: static,content,layouts,data,assets,i18n,and
   archetypes.

   You can combine modules in any combination you like, and even mount
   directories form non-Hugo projects,forming a big,virtual unior file
   system.
   
** Use Hugo Modules 

   How to use Hugo Modules to build and manage your site?
   
*** Prerequisite
    
    Most of the commands for Hugo Modules requires a newer version of
    GO installed and the relevant VCS client.
   
*** Initialize a New Module
    
    Use =hugo mode init= to initialize a new Hugo Module.If it fails
    to guess the module path,you must provide it as an argument.
   
*** Hugo modules noobs start fighting 

    one important question is: how to run hugo modules?
    
**** Prepare a Hugo site to test out Hugo Modules

     - Install latest version of go on yuor computer

       Make sure that you have installed a recent version of go on
       your computer.
       
       The ~hugo mode~ commands do not work without doing this.If you
       use the ~hugo mod~ commands,without installing **go**,nothing
       happens.You don't get an error message as feedback.
       
     - Prepare a test site to implement a theme as a Hugo module
    
       1.The theme =hugo-xmin= are used as an example.Can be downloaded
       from [[https://github.com/yihui/hugo-xmin/archive/master.zip][here]].
       2.Extract the folder =exampleSite= to your harddrive
       3.Rename ~exampleSite~ to =hugo-test-modules=.

**** TODO [[https://craftsmandigital.net/blog/hugo-modules/#prepare-a-test-site-to-implement-a-theme-as-a-hugo-module][here]]
     
** Blog migration plan
   
   1.我需要利用上面的 hugo module 来升级我的博客。

   2.图省事的话，直接发布到github 上，直接一步到位就行了。

   3.如果想要达到theme,document,deploy 三者分离部署的效果。
   需要动手做下试验.very magic~.
   
   这样做的好处是可以随时阅读别人托管在github 上的文档。看不懂的话，镶
   嵌在你的博客里，慢慢看就行了

*** 上传我的theme 到github
    
    这需要我抽离我的theme.
    
    这里有2个选择，你使用别人的Theme,还是使用自己的Hugo theme.
    
    我用我自己已经调好的Theme.但是不管你选哪个，它都是挂载在github 上
    的仓库。
    
    1) 导入你的Theme 仓库

       #+begin_example
	 [module]
	     [[module.imports]]
	     path = "github.com/lovemoganna/revolt-theme"
       #+end_example

    2) 安装好最新版本的Go 语言，将上面的Theme 作为Hugo Module.
       
       #+begin_example
	 hugo mod init <hugo_module_name>
       #+end_example
    
       这个时候会生成 =go.mod= 文件。
       
       #+begin_src shell :results verbatim :dir "~/.emacs.d/lisp/private/revolt_Blog/"
	 cat go.mod
       #+end_src

       #+RESULTS:
       #+begin_example
       module auto_revolt_theme

       go 1.14

       require (
	       github.com/lovemoganna/revolt-theme v0.0.0-20200627072238-3150a2802b70 // indirect
       )
       #+end_example
       
       这样你的远程调用就会被记录下来。

    3) 这个时候提交你已经搭建好的Hugo project.
       
       #+begin_example
	 git initgit add -A && git commit -m "Initial Commit"
	 git remote add origin https://github.com/< your username >/<your-repository>.git
	 git push -u origin master
       #+end_example

*** 添加文档作为Hugo Module
    
    也就是在你的 ~config.toml~ 文件下添加：

    #+begin_example
      [[module.imports]]
	      path = "github.com/craftsmandigital/markdown-content-repo"
	      disabled = false
	      [[module.imports.mounts]]
	      source = "testing-hugo-modules"
	      target = "content/new-stuff"
    #+end_example
    
    - path: 你挂载的 content 仓库。
    - source: 挂载仓库的 document location.
    - target: 当前项目的挂载路由.

      当你使用了 ~hugo mod init~ 的时候，代表了一个时间快照，就像 ~git
      submodules~ 一样，但如果你想体验最新功能，必须保持更新。

      无非就是直接干掉 =go.mod or go.sum=. 重新生成 =hugo module=.
    
*** You can use Hugo modules to mount any kind of resources to your Hugo site.

      You can mount layouts like partials shortcodes resources like JS
      libraries. Etc. Use your Imagination.

      That was all, really really really "Happy moduling".

      If you have some comments or criticism please let me know in the
      comments below.

*** 这么多的git 仓库，太难了，我们需要使用 git submodule
    
**** git module 的使用
     
     =git add submodule <url> <path>=

     - check already add git module
       
       #+begin_example
	 git diff --cached
       #+end_example
**** git module 的使用
     
     #+begin_example
       git submodule init
       git submodule update

       # another methods
       git submodule update --init --recursive
     #+end_example
**** git module 的更新
     #+begin_example
       # git pull
       # git log
     #+end_example
**** git module 的删除
     
     - =rm -rf <submodule name>
     - delete =.gitmodules=
     - delete about git module config in =.git/config= file.
     - delete =.git/module/*= dir
     - =git rm --cached <submodule name>=
    
*** 部署博客
    
**** 如何使用Git hooks 来自动化开发和部署任务？
     
     来自[[https://www.digitalocean.com/community/tutorials/how-to-use-git-hooks-to-automate-development-and-deployment-tasks][here]].如果不去了解的话，我想Git 的精髓也不会了解到。
     
     版本控制对于现代软件开发而言变成了重要依赖。它允许项目安全的追踪
     变化和开启还原，完整性检查，协作以及其他好处。 ~git~ 版本控制系统，
     基于其分散的架构以及在各方之间进行更改和转换的速度，被广泛采用。
     
     Git 工具套件提供了很多已实现的良好功能，其中最有用的特性之一就是
     它的灵活性。通过使用 =hook= 系统，Git 允许开发者和系统管理员基于
     不同的事件和动作调用指定脚本来extend functionality(扩展功能). 

**** Prerequisites(先决条件)
     
     在一切开始之前，你必须安装 =git= 在你的服务器上面。

**** Basic ieda with Git hooks
     
     Git hooks 是一个很简单的概念，被用于解决需求。当在一个分享的项目
     上开发软件的时候，维护风格指南标准，或者发布当发布软件的时候，
     （Git 经常被提及的所有时候),git hook 就是用来解决每次执行某项操作
     时需要执行重复的任务的。

     Git hooks 是基于event 的。当你运行某个Git commands 时，软件将会在
     Git 仓库检查 ~hook~ 目录，看与它关联的脚本是否运行。

     一些脚本在采取行动之前运行，可以被用于检查代码是否符合标准，健全
     性，或者用来设置环境。其他脚本运行在Event 之后，为了发布代码，重
     新建立正确的权限，一些不能被追踪Git等。

     使用这些功能，可以执行策略，确保一致性，并控制环境，甚至处理部署
     任务。
     
     Pro Git 这本书的作者尝试着将不同类型的Hooks 分类：
     
     - Client-Side Hooks: 在提交者的计算机Hooks 被执行和调用。这些又分
       为几个单独的类别：

       - Committing-Workflow hooks: Committing hooks 被用于指示在
         Commit 被提交时应采取的措施。它们被用于健全性检查，预填充
         commit 信息，和详细的校验信息。你可以使用它来在 committing 时
         提供通知。

       - Email Workflow hooks: 这个钩子的策略包含的动作是作用于Email
         补丁。像Linux Kernel 这样的项目提交和查看补丁的时候使用一种
         Email 的方法。这和 commit hooks 类似，但是可以被负责应用提交
         代码的维护人员使用。

       - Other: other client-side hooks include hooks that execute
         when merging ,checking out code, rebasing,rewriting,and
         cleaning repos.

     - Server-Side Hooks: These hooks are executed on servers that are
       used to receive =pushes=. Generally,that would be the main git
       repo for a project. Again,Chacon divided these into categories:
       
       - Pre-receive and post-receive: These are executed on the
         server receiving a push to do things like check for project
         conformance and to deploy after a push.

       - Update: This is like a pre-receive,but operates on a
         branch-by-branch basis to execute code priot to each branch
         being accepted.


     Certain hooks also take parameters.This means that when git calls
     the script for the hook,it will pass in some relevant data that
     the script can then use to complete tasks.In full,the hooks that
     available are:
     

     #+STARTUP: shrink
     |     Hook Name      |               Invoked By               | Description                                                                                                                                                                                                                                                                                                                                               |                                                                               Parameters(Number and Description)                                                                                |                                                                 |
     ||
     |        <c>         |                  <c>                   | <l6>                                                                                                                                                                                                                                                                                                                                                      |                                                                                               <c>                                                                                               |                                                                 |
     |   applypatch-msg   |                =git am=                | 可以编辑提交信息文件，常被用于校验或者主动格式化一个补丁的信息达到项目的标准。                                                                                                                                                                                                                                                                            |                                                                                   文件名包含计划好的提交信息                                                                                    |                                                                 |
     |   pre-applypatch   |                ~git am~                | 补丁被应用之后，变动在提交之前被调用。结束非0状态将放弃暂存区的变化。可以在真实提交变化之前检查Tree 的状态                                                                                                                                                                                                                                                |                                                                                              None                                                                                               |                                                                 |
     |  post-applypatch   |                =git am=                | 这个钩子应用在补丁被采用和提交之后。因此，它不能用来终止程序，主要用于新建通知。                                                                                                                                                                                                                                                                          |                                                                                              None                                                                                               |                                                                 |
     |     pre-commit     |              =git-commit=              | 这个钩子在获取计划好的提交信息之前被调用。退出任何非0状态将会终止命令，它被用来检查 commit 本身。                                                                                                                                                                                                                                                         |                                                                                              None                                                                                               |                                                                 |
     | prepare-commit-msg |              =git commit=              | 接收到默认 commit message 之后被调用，必须在启动提交信息编辑之前。这用于以不能抑制的方式编辑消息信息。                                                                                                                                                                                                                                                    | (1 to 3) Name of the file with the commit message, the source of the commit message (message, template, merge, squash, or commit), and the commit SHA-1 (when operating on an existing commit). |                                                                 |
     |     commit-msg     |              =git commit=              | 在已经编辑为了确保一致性标准或者基于标准拒绝后，这个钩子可以被用于调整信息，如果存在非0值，它可以终止命令。                                                                                                                                                                                                                                               |                                                                                     这个文件控制提示信息。                                                                                      |                                                                 |
     |    post-commit     |              =git commit=              | 在真实提交创建之后被调用，因此它不能打乱提交，主要用于允许通知。                                                                                                                                                                                                                                                                                          |                                                                                              None                                                                                               |                                                                 |
     |     pre-rebase     |              =git rebase=              | 当改变分支的时候被调用，如果不满意，停止改变分支                                                                                                                                                                                                                                                                                                          |                                                              (1 or 2) 从它 fork 的上游分支，正在改变的分支（当前改变分支不会设置）                                                              |                                                                 |
     |   post-checkout    |      =git check= and =git clone=       | 在更新 worktree 或者 git clone 之后运行检查的时候被调用。主要用于校验条件，展示不同，如果必要的话，顺便配置一下环境。                                                                                                                                                                                                                                     |                                   (3) Ref of the previous HEAD,ref of the new HEAD,flag indicating whether it was a branch checkout (1) or a file checkout(0)                                   |                                                                 |
     |      pre-push      |               =git push=               | 在 push 到远程之前被调用。除了用空格分隔传递 "<local ref>", "<local sha1>", "<remote ref>", "<remote sha1>" 传递参数，额外信息之外。解析输入可以获得你用于检查的额外的信息。例如，如果 local sha1 有40个0 那么长，PUSH 是删除操作，如果 remote sha1 有40个0那么长，PUSH 是一个新的分支。这可用于PUSH 引用与当前引用的很多比较。一个非0的终止状态禁止PUSH. |                                                                           (2)remote 目标的名字， remote 目标的位置。                                                                            |                                                                 |
     |    pre-receive     | =git-receive-pack = on the remote repo | 在更新PUSH 的引用之前，在远程仓库上调用此方法。非0 状态将会终止进程。尽管它可以接收无参数，但它可以通过 "<old-value>","<new-value>","<ref-name>" 的形式对每个 ref 传递一个字符串。                                                                                                                                                                        |                                                                                              None                                                                                               |                                                                 |
     |       update       | =git-receive-pack = on the remote repo | 对于每个PUSH 的引用，会在远程仓库上运行一次，而不是每次PUSH 一次。非0状态将会终止进程。可以被用于确认所有提交都是快进的。                                                                                                                                                                                                                                 |                                                          (3) The name of the ref being updated,the old object name,the new object name                                                          |                                                                 |
     |    post-receive    | =git-receive-pack= on the remote repo  | 所有 refs 在更新的PUSH 时，钩子会在远程运行。此钩子不带参数，但是通过 "<old-value>","<new-value>" ,"<ref-name>"时，钩子会在远程运行。此钩子不带参数，但是通过 "<old-value>","<new-value>","<ref-name>" 的格式来接收 info. 由于它是在更新后被调用，它不能终止进程。                                                                                        |                                                                                              None                                                                                               |                                                                 |
     |    post-update     | =git-receive-pack= on the remote repo  | 所有 refs 被PUSH 完毕后，此钩子只运行一次。在此方面，可以与 ~post-receive~ 类似。但是不接收 new/old value. 它最常用在对PUSH 过的Refs 实施通知。                                                                                                                                                                                                           |                                                                                                                                                                                                 | (?) A parameter for each of the pushed refs containing its name |
     |    post-auto-gc    |            =git gc --auto=             | 此钩子在自动清理仓库之前做一些检查。                                                                                                                                                                                                                                                                                                                      |                                                                                              None                                                                                               |                                                                 |
     |    post-rewrite    |  =git commit --amend= / =git -rebase=  | 当git 命令正在重写已经被提交的数据时，此钩子会被调用。除了参数，                                                                                                                                                                                                                                                                                               |                                                                                                                                                                                                 |                                                                 |



** Use Shortcodes
   
** page and list templates

** basic content files
   {{< highlight text >}} A bunch of code here {{< /highlight >}}
** TODO Shortcodes with raw strings parameters
** Shortcodes with markdown
   in hugo the ~%~ delimiters how to works?
** Image links
   There have a few alternatives for linking to images in Org files
   in a way that's compatible with =ox-hugo= and Hugo.
   
   first,we need have the /HUGO_BASE_DIR/ be =~/hugo/=.Then the Hugo
   static directory will be =~/hugo/static/=.
   
   #+begin_example
     ![Local Picture](/apple-touch-icon.png "Local Picture")
   #+end_example
   ![Local Picture](/apple-touch-icon.png "Local Picture")
   
** ox-hugo export image in content
   Conventionally any static content for a hugo site,like images,PDF
   files,and other attachments are put in the site =static/=
   dierctory.
   
   Files in that directory are served at the site root when the hugo
   publishes that site.So all the content in there can be accessed
   using the root prefox =/=.So a =static/foo.png= file can be
   accessed at =/foo.png=.

*** Inline image - unkyperlinked
    
    #+begin_example
      [[/images/web-image/cat.png]]
    #+end_example
    [[/images/web-image/cat.png]]
  
*** Inline image - Also hyperlinked to an image
    #+begin_example
      [[/images/web-image/cat.png][file:/images/web-image/cat.png]]
    #+end_example

    [[/images/web-image/cat.png][file:/images/web-image/cat.png]]
    
    The style of link is normally used if you want to link a low
    resolution image to its higher resolution version.
    
    *NOTE*
    
    The =file:= prefix can be used for the *link component* of the
    org link too - it doesn't hurt.

    A space in the path in the Description component of the Org link
    has to be encoded to *“%20”*.

    now i have a picture that name is *"cat 2.png"* .we could use
    the following form call it:
      
    #+begin_src
	[[/images/web-image/cat%202.png][file:/images/web-image/cat.png]]
    #+end_src

    file:/images/web-image/cat.png

*** Regular link to an image
    This style of linking will work for references to non-image files
    in the static directory.
    
    #+begin_example
      [[/images/web-image/cat%202.png][Click here to see "cat 2.png"]]
    #+end_example
    
    [[/images/web-image/cat%202.png][Click here to see "cat 2.png"]]
    
*** References to files *outside* the static directory
    This is a unique feature of =ox-hugo=.
    
    if a reference is made to a file outside the Hugo static
    directory,and if it one of the extensions listed in
    =org-hugo-external-file-extensions-allowed-for-copying=,then that
    file is copied by =ox-hugo= to the static directory.

    check above the variable,have many file types.
*** ox-hugo export image size test
    
    #+ATTR_HTML: :class inset :caption org mode logo
    #+caption: hello,welcome into org mode world,this is [[https://ox-hugo.scripter.co/test/posts/figure-shortcode-and-attr-html/][refer]] adderess
    https://ox-hugo.scripter.co/test/images/org-mode-unicorn-logo.png
**** Setting image size 
***** setting :width parameter
      #+begin_example
	,#+attr_html: :width 50
	,#+caption: Below rainbow cat is shown 50 pixel wide.
	[[file:/images/web-image/cat.png]]
      #+end_example

      #+attr_html: :width 50
      #+caption: Below rainbow cat is shown 50 pixel wide.
      [[file:/images/web-image/cat.png]]

      #+attr_html: :width 100
      #+caption: Below rainbow cat is shown 100 pixel wide.
      file:/images/web-image/cat.png
***** setting :height parameter and :width parameter
      #+begin_example
	,#+attr_html: :width 50 :height 100
	,#+caption: Below rainbow cat is shown 50 pixel wide.
	[[file:/images/web-image/cat.png]]
      #+end_example

      #+name: hello
      #+attr_html :width 20 :height 200
      #+caption: Below rainbow cat is shown 20x200 pixel wide.
      file:/images/web-image/cat.png
***** Multiple ATTR_HTML
      #+begin_example
	,#+html: <style>.foo img { border:2px solid black; }</style>
	,#+attr_html: :alt Org mode logo
	,#+attr_html: :width 300 :class foo
	[[https://ox-hugo.scripter.co/test/images/org-mode-unicorn-logo.png]]
      #+end_example
      
      #+html: <style>.foo img { border:2px solid black; }</style>
      #+attr_html: :alt Org mode logo
      #+attr_html: :width 300 :class foo
      [[https://ox-hugo.scripter.co/test/images/org-mode-unicorn-logo.png]]]
      
*** ox-hugo export html image test
    
    
**** more CSS setting
     https://emacs.stackexchange.com/questions/5980/setting-class-attribute-for-html-table-in-orgmode-export
* Footnotes
[fn:1] [[https://anaulin.org/blog/hugo-raw-html-shortcode/][refer link]] 
